CREATE TABLE public.people (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100),
  sur_name VARCHAR(100),
  primary_phone VARCHAR(20),
  secondary_phone VARCHAR(20),
  email VARCHAR(150),
  address TEXT,
  location TEXT,
  state TEXT,
  country TEXT,
  relation TEXT,
  notes TEXT,
  is_active BOOLEAN DEFAULT true,
  is_deleted BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  created_by UUID,
  updated_by UUID
);

-- Foreign Keys
ALTER TABLE public.people
  ADD CONSTRAINT people_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  ADD CONSTRAINT people_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id);

-- Indexes
CREATE INDEX idx_people_is_active ON public.people(is_active);
CREATE INDEX idx_people_is_deleted ON public.people(is_deleted);
CREATE INDEX idx_people_created_by ON public.people(created_by);

-- Enable Row-Level Security
ALTER TABLE public.people ENABLE ROW LEVEL SECURITY;

-- Policies
CREATE POLICY "Select people for user" ON public.people
  FOR SELECT TO public
  USING (auth.uid() IS NOT NULL AND created_by = auth.uid());

CREATE POLICY "Insert people for user" ON public.people
  FOR INSERT TO public
  WITH CHECK (auth.uid() IS NOT NULL AND created_by = auth.uid());

CREATE POLICY "Update people for user" ON public.people
  FOR UPDATE TO public
  USING (auth.uid() IS NOT NULL AND created_by = auth.uid())
  WITH CHECK (auth.uid() IS NOT NULL AND created_by = auth.uid());
